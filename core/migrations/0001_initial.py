# Generated by Django 5.1.1 on 2024-09-06 16:05

import core.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Logger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(max_length=255, unique=True)),
                ('registered_date', models.DateTimeField(auto_now=True)),
                ('rent_status', models.BooleanField(default=False)),
                ('logger_surface', models.CharField(blank=True, choices=[('Surface', 'Surface'), ('Ambient', 'Ambient'), ('External', 'External')], max_length=10, null=True)),
            ],
            options={
                'verbose_name_plural': 'loggers',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=255)),
                ('surname', models.CharField(max_length=255)),
                ('last_changed', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_permissions_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Logger_Changes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logger_sent_date', models.DateTimeField(auto_now=True)),
                ('logger_received_date', models.DateTimeField(auto_now=True)),
                ('rent_date', models.DateTimeField(auto_now=True)),
                ('rent_days', models.IntegerField()),
                ('change_date', models.DateTimeField(auto_now=True)),
                ('logger', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.logger')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'logger changes',
            },
        ),
        migrations.CreateModel(
            name='Logger_Data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.BigIntegerField()),
                ('air_temperature', models.FloatField()),
                ('surface_temperature', models.FloatField()),
                ('humidity', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('pressure', models.FloatField(validators=[django.core.validators.MinValueValidator(950.0), django.core.validators.MaxValueValidator(1100.0)])),
                ('magnetometer_x', models.SmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-32768), django.core.validators.MaxValueValidator(32767)])),
                ('magnetometer_y', models.SmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-32768), django.core.validators.MaxValueValidator(32767)])),
                ('magnetometer_z', models.SmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-32768), django.core.validators.MaxValueValidator(32767)])),
                ('logger', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.logger')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'logger data',
            },
        ),
        migrations.CreateModel(
            name='Logger_Health',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.BigIntegerField()),
                ('battery_voltage', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(2.4), django.core.validators.MaxValueValidator(4.5)])),
                ('faulty_status', models.BooleanField(default=False)),
                ('logger', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.logger')),
            ],
            options={
                'verbose_name_plural': 'logger health',
            },
        ),
        migrations.CreateModel(
            name='PasswordReset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('report_timestamp', models.DateTimeField(auto_now=True)),
                ('property_address', models.CharField(max_length=455)),
                ('external_picture', models.ImageField(blank=True, null=True, upload_to=core.models.report_property_photo_upload_path)),
                ('external_logger', models.CharField(max_length=7)),
                ('company', models.CharField(max_length=255)),
                ('company_logo', models.ImageField(blank=True, null=True, upload_to=core.models.company_logo_upload_path)),
                ('surveyor', models.CharField(max_length=255)),
                ('notes', models.TextField()),
                ('occupied', models.BooleanField(default=False)),
                ('occupied_during_all_monitoring', models.BooleanField(default=False)),
                ('number_of_occupants', models.IntegerField(default=0)),
                ('report_file', models.FileField(blank=True, null=True, upload_to='reports/')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_name', models.CharField(max_length=255)),
                ('room_picture', models.ImageField(blank=True, null=True, upload_to=core.models.room_photo_upload_path)),
                ('room_ambient_logger', models.CharField(max_length=7)),
                ('room_surface_logger', models.CharField(max_length=7)),
                ('room_monitor_area', models.CharField(blank=True, max_length=255, null=True)),
                ('room_mould_visible', models.BooleanField(default=False)),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='core.report')),
            ],
        ),
    ]
